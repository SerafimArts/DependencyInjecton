{"version":3,"sources":["regexp/Test.commonjs-wrap","Test.js","regexp/boot.commonjs-wrap","boot.js","regexp/Di/Container.commonjs-wrap","Di/Container.js","regexp/Di/Exceptions.commonjs-wrap","Di/Exceptions.js","regexp/Di/Mapping.commonjs-wrap","Di/Mapping.js","regexp/Di/Reflection.commonjs-wrap","Di/Reflection.js","regexp/Di/Resolver.commonjs-wrap","Di/Resolver.js"],"names":[],"mappings":"AAAA;AACA,ECDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBDvDE;AACF;AACA;AACA;;AEJA;AACA,ECDA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AATA;AAWA;AACA;AACA;AAXe;AACX;AACI;AACA;AACH;AAaL;AAXI;AACH,CDTC;AACF;AACA;AACA;;AEJA;AACA,ECDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVQ;AAYR;AAVQ;AACH;AAYL;AACA;AACA;AAXQ;AAaR;AAXQ;AACH;AAaL;AACA;AACA;AAZQ;AACH;AAcL;AACA;AACA;AAbQ;AACI;AACH;AAeT;AAbQ;AACH;AAeL;AACA;AACA;AA7CQ;AACI;AACH;AACD;AACH;AA+CL;AACA;AACA;AACA;AACA,4BDjEE;AACF;AACA;AACA;;AEJA;AACA,ECDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBI;AAAyB;AAyB7B;AAzB6B;AAExB;AA0BL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBD7CE;AACF;AACA;AACA;;AEJA;AACA,ECDA;AACA;AACA;AACA;AACA;AACA;AALA;AACI;AACH;AAOD;AALA;AAOA;AALO;AAAiC;AAAd;AAAc;AAUxC;AATI;AACI;AAEqB;AAAA;AAExB;AACJ,CDZC;AACF;AACA;AACA;;AEJA;AACA,ECDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBQ;AACH;AAqBL;AACA;AACA;AApBQ;AAIH;AAmBL;AACA;AACA;AAlBQ;AACH;AAoBL;AACA;AACA;AACA;AACA;AACA;AArBI;AAA8B;AAwBlC;AAvBQ;AACH;AAyBL;AACA;AACA;AACA;AAzBQ;AACH;AA2BL;AACA;AACA;AA1BQ;AAA2E;AAAA;AAC9E;AA8BL;AACA;AACA;AA7BQ;AACH;AA+BL;AACA;AACA;AA9BQ;AACH;AAgCL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnCI;AAA0B;AAsC9B;AAtC8B;AAwC9B;AAtCQ;AAFsB;AAGzB;AAyCL;AACA;AACA;AACA;AAzCQ;AACH;AA2CL;AACA;AACA;AA3CwB;AAAV;AAAU;AA+CxB;AA9CQ;AACH;AAgDL;AACA;AACA;AACA,sBDrGE;AACF;AACA;AACA;;AEJA;AACA,ECDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AAbA;AAeA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBI;AAAgE;AAuBpE;AAvBoE;AAyBpE;AAxBQ;AACA;AACH;AA0BL;AACA;AACA;AACA;AA1BQ;AACH;AA4BL;AACA;AACA;AA3BQ;AACH;AA6BL;AACA;AACA;AA5BQ;AACI;AAAA;AADiC;AAAA;AAAA;AAmC7C;AAnC6C;AAEjC;AAAsB;AAqClC;AApCgB;AACA;AACI;AAGH;AAoCjB;AAlCgB;AAoChB;AAlCgB;AACH;AAbgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcpC;AAkDT;AAhDQ;AACH;AAkDL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/DQ;AACI;AACI;AACJ;AACI;AAJR;AAsER;AA/DQ;AACH;AAiEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlFQ;AACI;AACH;AAoFT;AAlFQ;AACH;AAoFL;AACA;AACA;AACA,mBDvJE;AACF;AACA;AACA","file":"container.js","sourcesContent":["require.register(\"Test\", function(exports, require, module){\n  $0\n  \n});\n\n","import { Inject } from \"/Di/Mapping\";\n\nexport default class Test {\n    @Inject('app')\n    some(app):string {\n\n    }\n}","require.register(\"boot\", function(exports, require, module){\n  $0\n  \n});\n\n","import Container from \"/Di/Container\";\nimport { Inject as Injection } from \"/Di/Mapping\";\n\nexport default function boot() {\n    window.app = function(value) {\n        var app = Container.getInstance();\n        return value ? app.make(value) : app;\n    };\n\n    window.Inject = Injection;\n}","require.register(\"Di/Container\", function(exports, require, module){\n  $0\n  \n});\n\n","import {FactoryResolver, SingletonResolver, default as Resolver} from \"/Di/Resolver\";\n\ntype ContainerAlias = string|Function;\ntype ContainerConcrete = Object|Function;\n\nexport default class Container {\n    _dependencies:Map<Resolver> = new Map;\n\n    static _instance:?Container = null;\n\n    static getInstance():Container {\n        if (this._instance === null) {\n            this._instance = new this;\n        }\n        return this._instance;\n    }\n\n    bind(alias:ContainerAlias, concrete:ContainerConcrete):Container {\n        this._dependencies.set(alias, new FactoryResolver(this, concrete));\n\n        return this;\n    }\n\n    singleton(alias:ContainerAlias, concrete:ContainerConcrete):Container {\n        this._dependencies.set(alias, new SingletonResolver(this, concrete));\n\n        return this;\n    }\n\n    has(alias:ContainerAlias):boolean {\n        return this._dependencies.has(alias);\n    }\n\n    make(alias:ContainerAlias):any {\n        if (!this.has(alias)) {\n            return (new FactoryResolver(this, alias)).resolve();\n        }\n\n        return this._dependencies.get(alias).resolve();\n    }\n}","require.register(\"Di/Exceptions\", function(exports, require, module){\n  $0\n  \n});\n\n","export class ContainerException extends Error {\n}\n\nexport class ServiceNotFoundException extends ContainerException {\n    constructor(name:string) {\n        super(`Service \"${(name.name || name).toString()}\" not found`);\n    }\n}\n\nexport class ServiceResolvingException extends ContainerException {\n}\n","require.register(\"Di/Mapping\", function(exports, require, module){\n  $0\n  \n});\n\n","function _resolveDependency(obj) {\n    return obj && obj.default ? obj.default : obj;\n}\n\nvar INJECTION = Symbol('[injections]');\n\nexport function Inject(...dependencies) {\n    return function (target, key, descriptor) {\n        return Reflect.metadata(\n            INJECTION,\n            dependencies.map(i => _resolveDependency(i))\n        )(target, key, descriptor);\n    };\n}","require.register(\"Di/Reflection\", function(exports, require, module){\n  $0\n  \n});\n\n","export class Reflection {\n    static isFunction(value) {\n        return value && value instanceof Function && value.constructor.name === 'Function';\n    }\n\n    static isClass(value) {\n        return value &&\n            typeof value.name === 'string' &&\n            value.name.length > 0 &&\n            this.isFunction(value);\n    }\n\n    static isClosure(value) {\n        return value && !value.name && this.isFunction(value);\n    }\n}\n\nexport class ReflectionFunction {\n    constructor(closure:Function) {\n        this._closure = closure;\n    }\n\n    _getMatches():Array<string> {\n        return this._closure.toString().match(/function\\s*\\((.*?)\\)\\s*\\{/) || [];\n    }\n\n    getArguments():Array<string> {\n        return (this._getMatches()[1] || '').replace(/\\s+/g, '').split(',').filter(i => i.length > 0);\n    }\n\n    getName():string {\n        return this._closure.name || 'Function@Anonymous';\n    }\n\n    invoke(...args):any {\n        return this._closure(...args);\n    }\n}\n\nexport class ReflectionClass extends ReflectionFunction {\n    constructor(cls:Function) {\n        super(cls);\n        this._class = cls;\n    }\n\n    _getMatches():Array<string> {\n        return this._closure.toString().match(/function\\s*.*?\\s*\\((.*?)\\)\\s*\\{/) || [];\n    }\n\n    invoke(...args):any {\n        return new this._class(...args);\n    }\n}\n","require.register(\"Di/Resolver\", function(exports, require, module){\n  $0\n  \n});\n\n","import Container from '/Di/Container';\nimport { Reflection, ReflectionClass, ReflectionFunction } from '/Di/Reflection';\nimport { ServiceResolvingException } from '/Di/Exceptions';\n\ntype ContainerConcrete = Object|Function;\n\nexport default class Resolver {\n    _resolvedArgs:Array<string> = [];\n\n    constructor(container:Container, declaration:ContainerConcrete) {\n        this._container   = container;\n        this._declaration = declaration;\n    }\n\n    getContainer():Container {\n        return this._container;\n    }\n\n    getConcrete():ContainerConcrete {\n        return this._declaration;\n    }\n\n    resolve(reflection:ReflectionFunction):any {\n        if (this._resolvedArgs.length === 0) {\n            var i = 0, args = reflection.getArguments();\n            for (var arg of args) {\n                i++;\n                if (!this.getContainer().has(arg)) {\n                    throw new ServiceResolvingException(\n                        `Can not resolve argument#${i} \"${arg}\" of ${reflection.getName()}`\n                    );\n                }\n\n                var argument = this.getContainer().make(arg);\n\n                this._resolvedArgs.push(argument);\n            }\n        }\n\n        return reflection.invoke(...this._resolvedArgs);\n    }\n}\n\nexport class FactoryResolver extends Resolver {\n    resolve():any {\n        switch (true) {\n            case Reflection.isClass(this.getConcrete()):\n                return super.resolve(new ReflectionClass(this.getConcrete()));\n            case Reflection.isClosure(this.getConcrete()):\n                return super.resolve(new ReflectionFunction(this.getConcrete()));\n        }\n\n        return this.getConcrete();\n    }\n}\n\nexport class SingletonResolver extends FactoryResolver {\n    _resolvableInstance:any = null;\n\n    resolve():any {\n        if (this._resolvableInstance === null) {\n            this._resolvableInstance = super.resolve();\n        }\n\n        return this._resolvableInstance;\n    }\n}"],"sourceRoot":"/source/"}