{"version":3,"sources":["regexp/Di/Container.commonjs-wrap","Di/Container.js","regexp/Di/Exceptions.commonjs-wrap","Di/Exceptions.js","regexp/Di/Reflection.commonjs-wrap","Di/Reflection.js","regexp/Di/Resolver.commonjs-wrap","Di/Resolver.js"],"names":[],"mappings":"AAAA;AACA,ECDA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbQ;AAeR;AAbQ;AACH;AAeL;AACA;AACA;AAdQ;AAgBR;AAdQ;AACH;AAgBL;AACA;AACA;AAfQ;AACH;AAiBL;AACA;AACA;AAhBQ;AACI;AAkBZ;AAhBS;AAkBT;AAhBQ;AACH;AAkBL;AACA;AACA;AACA;AACA;AACA,4BDtDE;AACF;AACA;AACA;;AEJA;AACA,ECDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBI;AAAyB;AAqB7B;AArB6B;AAExB;AAsBL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBDzCE;AACF;AACA;AACA;;AEJA;AACA,ECDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBI;AAA8B;AAqBlC;AApBQ;AACH;AAsBL;AACA;AACA;AACA;AAtBQ;AACH;AAwBL;AACA;AACA;AAvBQ;AACH;AAyBL;AACA;AACA;AAxBQ;AACH;AA0BL;AACA;AACA;AAzBQ;AACH;AA2BL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BI;AAA0B;AAiC9B;AAjC8B;AAmC9B;AAjCQ;AAFsB;AAGzB;AAoCL;AACA;AACA;AACA;AApCQ;AACH;AAsCL;AACA;AACA;AArCQ;AACH;AAuCL;AACA;AACA;AAvCwB;AAAV;AAAU;AA2CxB;AA1CQ;AACH;AA4CL;AACA;AACA;AACA,sBDzFE;AACF;AACA;AACA;;AEJA;AACA,ECDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AAZA;AAcA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBI;AAAgE;AAsBpE;AAtBoE;AAwBpE;AAvBQ;AACA;AACH;AAyBL;AACA;AACA;AACA;AAzBQ;AAIH;AAwBL;AACA;AACA;AAvBQ;AACH;AAyBL;AACA;AACA;AAxBQ;AAGH;AAwBL;AACA;AACA;AAvBQ;AACH;AAyBL;AACA;AACA;AAxBQ;AACH;AA0BL;AACA;AACA;AAzBQ;AACI;AAAA;AADiC;AAAA;AAAA;AAgC7C;AAhC6C;AAEjC;AAAsB;AAkClC;AAjCgB;AACA;AACI;AAGH;AAiCjB;AA/BgB;AAiChB;AA/BgB;AACH;AAbgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcpC;AA+CT;AA7CQ;AACH;AA+CL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5DQ;AACI;AACI;AACJ;AACI;AACJ;AACI;AANR;AAqER;AA5DQ;AACH;AA8DL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/EQ;AACI;AACH;AAiFT;AA/EQ;AACH;AAiFL;AACA;AACA;AACA,mBDvKE;AACF;AACA;AACA","file":"container.js","sourcesContent":["require.register(\"Di/Container\", function(exports, require, module){\n  $0\n  \n});\n\n","import {FactoryResolver, SingletonResolver, default as Resolver} from \"/Di/Resolver\";\nimport {ServiceNotFoundException} from \"/Di/Exceptions\";\n\ntype ContainerAlias = string|Function;\ntype ContainerConcrete = Object|Function;\n\nexport default class Container {\n    _dependencies:Map<Resolver> = new Map;\n\n    bind(alias:ContainerAlias, concrete:ContainerConcrete) {\n        this._dependencies.set(alias, new FactoryResolver(this, concrete));\n        \n        return this;\n    }\n\n    singleton(alias:ContainerAlias, concrete:ContainerConcrete) {\n        this._dependencies.set(alias, new SingletonResolver(this, concrete));\n\n        return this;\n    }\n\n    has(alias:ContainerAlias):boolean {\n        return this._dependencies.has(alias);\n    }\n\n    make(alias:ContainerAlias) {\n        if (!this.has(alias)) {\n            return this.bind(alias).make(alias);\n            //throw new ServiceNotFoundException(alias);\n        }\n\n        return this._dependencies.get(alias).resolve();\n    }\n}","require.register(\"Di/Exceptions\", function(exports, require, module){\n  $0\n  \n});\n\n","export class ContainerException extends Error {\n}\n\nexport class ServiceNotFoundException extends ContainerException {\n    constructor(name:string) {\n        super(`Service \"${(name.name || name).toString()}\" not found`);\n    }\n}\n\nexport class ServiceResolvingException extends ContainerException {\n}\n","require.register(\"Di/Reflection\", function(exports, require, module){\n  $0\n  \n});\n\n","class ReflectionException extends Error {\n\n}\n\n\nexport class ReflectionFunction {\n    constructor(closure:Function) {\n        this._closure = closure;\n    }\n\n    _getMatches():Array<string> {\n        return this._closure.toString().match(/function\\s*\\((.*?)\\)\\s*\\{/) || [];\n    }\n\n    getArguments():Array<string> {\n        return (this._getMatches()[1] || '').replace(/\\s+/g, '').split(',');\n    }\n\n    getName():string {\n        return this._closure.name || 'Function@Anonymous';\n    }\n\n    invoke(...args):any {\n        return this._closure(...args);\n    }\n}\n\nexport class ReflectionClass extends ReflectionFunction {\n    constructor(cls:Function) {\n        super(cls);\n        this._class = cls;\n    }\n\n    _getMatches():Array<string> {\n        return this._closure.toString().match(/function\\s*.*?\\s*\\((.*?)\\)\\s*\\{/) || [];\n    }\n\n    getName():string {\n        return `${super.getName()} class`;\n    }\n\n    invoke(...args):any {\n        return new this._class(...args);\n    }\n}\n","require.register(\"Di/Resolver\", function(exports, require, module){\n  $0\n  \n});\n\n","import Container from '/Di/Container';\nimport { ReflectionClass, ReflectionFunction } from '/Di/Reflection';\nimport { ServiceResolvingException } from '/Di/Exceptions';\n\ntype ContainerConcrete = Object|Function;\n\nexport default class Resolver {\n    _resolvedArgs:Array<string> = [];\n\n    constructor(container:Container, declaration:ContainerConcrete) {\n        this._container   = container;\n        this._declaration = declaration;\n    }\n\n    isFunction():boolean {\n        return this._declaration instanceof Function && (\n            !this._declaration.name ||\n            this._declaration.name === 'Function'\n        );\n    }\n\n    isInstance():boolean {\n        return this._declaration !== null && typeof this._declaration === 'object';\n    }\n\n    isClass():boolean {\n        return this._declaration.name &&\n            this._declaration.name !== 'Function' &&\n            this._declaration instanceof Function;\n    }\n\n    getContainer():Container {\n        return this._container;\n    }\n\n    getConcrete():ContainerConcrete {\n        return this._declaration;\n    }\n\n    resolve(reflection:ReflectionFunction):any {\n        if (this._resolvedArgs.length === 0) {\n            var i = 0, args = reflection.getArguments();\n            for (var arg of args) {\n                i++;\n                if (!this.getContainer().has(arg)) {\n                    throw new ServiceResolvingException(\n                        `Can not resolve argument#${i} \"${arg}\" for ${reflection.getName()}`\n                    );\n                }\n\n                var argument = this.getContainer().make(arg);\n\n                this._resolvedArgs.push(argument);\n            }\n        }\n\n        return reflection.invoke(...this._resolvedArgs);\n    }\n}\n\nexport class FactoryResolver extends Resolver {\n    resolve():any {\n        switch (true) {\n            case this.isInstance():\n                return this.getConcrete();\n            case this.isClass():\n                return super.resolve(new ReflectionClass(this.getConcrete()));\n            case this.isFunction():\n                return super.resolve(new ReflectionFunction(this.getConcrete()));\n        }\n\n        return this.getConcrete();\n    }\n}\n\nexport class SingletonResolver extends FactoryResolver {\n    _resolvableInstance:any = null;\n\n    resolve():any {\n        if (this._resolvableInstance === null) {\n            this._resolvableInstance = super.resolve();\n        }\n\n        return this._resolvableInstance;\n    }\n}"],"sourceRoot":"/source/"}